[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/AUTO_ML_H20_2_Perf_Measure.html",
    "href": "content/01_journal/AUTO_ML_H20_2_Perf_Measure.html",
    "title": "\n1 Perfromace_Measures",
    "section": "",
    "text": "library(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nlibrary(stringr)\nlibrary(forcats)\nproduct_backorders_tbl &lt;- read.csv(\"product_backorders.csv\")\nproduct_backorders_tbl %&gt;% glimpse()\n\n#&gt; Rows: 19,053\n#&gt; Columns: 23\n#&gt; $ sku               &lt;int&gt; 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#&gt; $ national_inv      &lt;int&gt; 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#&gt; $ lead_time         &lt;int&gt; 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#&gt; $ in_transit_qty    &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#&gt; $ forecast_3_month  &lt;int&gt; 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#&gt; $ forecast_6_month  &lt;int&gt; 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#&gt; $ forecast_9_month  &lt;int&gt; 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#&gt; $ sales_1_month     &lt;int&gt; 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#&gt; $ sales_3_month     &lt;int&gt; 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#&gt; $ sales_6_month     &lt;int&gt; 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#&gt; $ sales_9_month     &lt;int&gt; 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#&gt; $ min_bank          &lt;int&gt; 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#&gt; $ potential_issue   &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ pieces_past_due   &lt;int&gt; 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#&gt; $ perf_6_month_avg  &lt;dbl&gt; 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#&gt; $ perf_12_month_avg &lt;dbl&gt; 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#&gt; $ local_bo_qty      &lt;int&gt; 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ deck_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ oe_constraint     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ ppap_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#&gt; $ stop_auto_buy     &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#&gt; $ rev_stop          &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ went_on_backorder &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\ndata_split &lt;- initial_split(product_backorders_tbl, prop = 3/4)\n# Assign training and test data\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n# Specifying of the response and the predictor variables\nfactor_names &lt;- c(\"went_on_backorder\")\nproduct_rec &lt;- \n  recipe(went_on_backorder ~ ., data = train_data) %&gt;%  \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  step_mutate_at(factor_names, fn = as.factor) %&gt;%\n  prep()\n\n#&gt; Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\n#&gt; ℹ Please use `all_of()` or `any_of()` instead.\n#&gt;   # Was:\n#&gt;   data %&gt;% select(factor_names)\n#&gt; \n#&gt;   # Now:\n#&gt;   data %&gt;% select(all_of(factor_names))\n#&gt; \n#&gt; See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;.\n\nd &lt;- summary(product_rec)\ntrain_tbl &lt;- bake(product_rec, new_data = train_data)\ntest_tbl  &lt;- bake(product_rec, new_data = test_data)\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         45 minutes 41 seconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    5 months and 23 days \n#&gt;     H2O cluster name:           H2O_started_from_R_shenoy_xsd492 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   2.87 GB \n#&gt;     H2O cluster total cores:    12 \n#&gt;     H2O cluster allowed cores:  12 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29)\n\n\n#&gt; Warning in h2o.clusterInfo(): \n#&gt; Your H2O cluster version is (5 months and 23 days) old. There may be a newer version available.\n#&gt; Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Splitting the data for validation df\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\n# AutoML Model\nh2o_models_automl &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#&gt; 05:29:52.402: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |==============                                                        |  19%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |=================================                                     |  46%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  91%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h2o_models_automl)\n\n#&gt; [1] \"S4\"\n\nslotNames(h2o_models_automl)\n\n#&gt; [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#&gt; [5] \"modeling_steps\" \"training_info\"\n\nh2o_models_automl@leaderboard \n\n#&gt;                                                 model_id       auc   logloss\n#&gt; 1 StackedEnsemble_BestOfFamily_4_AutoML_7_20240613_52952 0.9603282 0.1516380\n#&gt; 2 StackedEnsemble_BestOfFamily_3_AutoML_7_20240613_52952 0.9598579 0.1531670\n#&gt; 3    StackedEnsemble_AllModels_2_AutoML_7_20240613_52952 0.9598118 0.1536895\n#&gt; 4    StackedEnsemble_AllModels_3_AutoML_7_20240613_52952 0.9597982 0.1648356\n#&gt; 5    StackedEnsemble_AllModels_1_AutoML_7_20240613_52952 0.9594289 0.1551835\n#&gt; 6 StackedEnsemble_BestOfFamily_2_AutoML_7_20240613_52952 0.9590267 0.1542342\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7785477            0.1432583 0.2115212 0.04474121\n#&gt; 2 0.7732527            0.1697896 0.2123314 0.04508464\n#&gt; 3 0.7675629            0.1402769 0.2130288 0.04538125\n#&gt; 4 0.7737077            0.1392309 0.2155759 0.04647299\n#&gt; 5 0.7608454            0.1421131 0.2142077 0.04588494\n#&gt; 6 0.7697856            0.1308210 0.2129497 0.04534758\n#&gt; \n#&gt; [40 rows x 7 columns]\n\nh2o_models_automl@leader\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_4_AutoML_7_20240613_52952 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              4/6\n#&gt; 3           # GBM base models (used / total)              1/1\n#&gt; 4       # XGBoost base models (used / total)              1/1\n#&gt; 5           # DRF base models (used / total)              2/2\n#&gt; 6  # DeepLearning base models (used / total)              0/1\n#&gt; 7           # GLM base models (used / total)              0/1\n#&gt; 8                      Metalearner algorithm              GLM\n#&gt; 9         Metalearner fold assignment scheme           Random\n#&gt; 10                        Metalearner nfolds                5\n#&gt; 11                   Metalearner fold_column               NA\n#&gt; 12        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.02312537\n#&gt; RMSE:  0.1520703\n#&gt; LogLoss:  0.08931282\n#&gt; Mean Per-Class Error:  0.0704569\n#&gt; AUC:  0.9918894\n#&gt; AUCPR:  0.9574798\n#&gt; Gini:  0.9837788\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error       Rate\n#&gt; No     8682   98 0.011162   =98/8780\n#&gt; Yes     157 1053 0.129752  =157/1210\n#&gt; Totals 8839 1151 0.025526  =255/9990\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.456634    0.891995 166\n#&gt; 2                       max f2  0.268276    0.902536 222\n#&gt; 3                 max f0point5  0.555652    0.919714 139\n#&gt; 4                 max accuracy  0.461578    0.974575 164\n#&gt; 5                max precision  0.987438    1.000000   0\n#&gt; 6                   max recall  0.017353    1.000000 358\n#&gt; 7              max specificity  0.987438    1.000000   0\n#&gt; 8             max absolute_mcc  0.461578    0.878022 164\n#&gt; 9   max min_per_class_accuracy  0.224748    0.952278 237\n#&gt; 10 max mean_per_class_accuracy  0.203518    0.952830 245\n#&gt; 11                     max tns  0.987438 8780.000000   0\n#&gt; 12                     max fns  0.987438 1205.000000   0\n#&gt; 13                     max fps  0.000736 8780.000000 399\n#&gt; 14                     max tps  0.017353 1210.000000 358\n#&gt; 15                     max tnr  0.987438    1.000000   0\n#&gt; 16                     max fnr  0.987438    0.995868   0\n#&gt; 17                     max fpr  0.000736    1.000000 399\n#&gt; 18                     max tpr  0.017353    1.000000 358\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.05079156\n#&gt; RMSE:  0.2253698\n#&gt; LogLoss:  0.1698309\n#&gt; Mean Per-Class Error:  0.1310602\n#&gt; AUC:  0.9537734\n#&gt; AUCPR:  0.7582438\n#&gt; Gini:  0.9075467\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2941 164 0.052818  =164/3105\n#&gt; Yes      90 340 0.209302    =90/430\n#&gt; Totals 3031 504 0.071853  =254/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.317384    0.728051 203\n#&gt; 2                       max f2  0.162889    0.787828 262\n#&gt; 3                 max f0point5  0.511858    0.734358 145\n#&gt; 4                 max accuracy  0.511858    0.932107 145\n#&gt; 5                max precision  0.989406    1.000000   0\n#&gt; 6                   max recall  0.004259    1.000000 388\n#&gt; 7              max specificity  0.989406    1.000000   0\n#&gt; 8             max absolute_mcc  0.302430    0.690195 208\n#&gt; 9   max min_per_class_accuracy  0.145878    0.888372 270\n#&gt; 10 max mean_per_class_accuracy  0.162889    0.891065 262\n#&gt; 11                     max tns  0.989406 3105.000000   0\n#&gt; 12                     max fns  0.989406  429.000000   0\n#&gt; 13                     max fps  0.000812 3105.000000 399\n#&gt; 14                     max tps  0.004259  430.000000 388\n#&gt; 15                     max tnr  0.989406    1.000000   0\n#&gt; 16                     max fnr  0.989406    0.997674   0\n#&gt; 17                     max fpr  0.000812    1.000000 399\n#&gt; 18                     max tpr  0.004259    1.000000 388\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05015146\n#&gt; RMSE:  0.2239452\n#&gt; LogLoss:  0.1680532\n#&gt; Mean Per-Class Error:  0.1370974\n#&gt; AUC:  0.953709\n#&gt; AUCPR:  0.7607943\n#&gt; Gini:  0.9074181\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     8942  515 0.054457   =515/9457\n#&gt; Yes     285 1012 0.219738   =285/1297\n#&gt; Totals 9227 1527 0.074391  =800/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.308021    0.716714 213\n#&gt; 2                       max f2  0.173576    0.780745 260\n#&gt; 3                 max f0point5  0.598329    0.739042 123\n#&gt; 4                 max accuracy  0.573003    0.930537 130\n#&gt; 5                max precision  0.988515    1.000000   0\n#&gt; 6                   max recall  0.003744    1.000000 390\n#&gt; 7              max specificity  0.988515    1.000000   0\n#&gt; 8             max absolute_mcc  0.308021    0.677200 213\n#&gt; 9   max min_per_class_accuracy  0.123342    0.885891 284\n#&gt; 10 max mean_per_class_accuracy  0.092073    0.887358 301\n#&gt; 11                     max tns  0.988515 9457.000000   0\n#&gt; 12                     max fns  0.988515 1295.000000   0\n#&gt; 13                     max fps  0.000618 9457.000000 399\n#&gt; 14                     max tps  0.003744 1297.000000 390\n#&gt; 15                     max tnr  0.988515    1.000000   0\n#&gt; 16                     max fnr  0.988515    0.998458   0\n#&gt; 17                     max fpr  0.000618    1.000000 399\n#&gt; 18                     max tpr  0.003744    1.000000 390\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.925588  0.005541   0.927811   0.919829   0.933610   0.921077\n#&gt; auc         0.954021  0.005215   0.947220   0.950995   0.960874   0.954506\n#&gt; err         0.074412  0.005541   0.072189   0.080171   0.066390   0.078923\n#&gt; err_count 160.000000 11.467345 156.000000 169.000000 144.000000 173.000000\n#&gt; f0point5    0.683918  0.030461   0.701619   0.660680   0.713796   0.642857\n#&gt;           cv_5_valid\n#&gt; accuracy    0.925612\n#&gt; auc         0.956510\n#&gt; err         0.074388\n#&gt; err_count 158.000000\n#&gt; f0point5    0.700637\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.663261  0.041825   0.702703   0.631902   0.695652\n#&gt; r2                  0.526842  0.025402   0.506158   0.510460   0.562849\n#&gt; recall              0.789296  0.054243   0.697318   0.807843   0.796935\n#&gt; residual_deviance 722.264600 33.841267 771.119200 730.039730 676.876160\n#&gt; rmse                0.223879  0.005826   0.229001   0.228156   0.215113\n#&gt; specificity         0.944389  0.011724   0.959474   0.935240   0.952306\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.607038   0.679012\n#&gt; r2                  0.510228   0.544516\n#&gt; recall              0.841463   0.802920\n#&gt; residual_deviance 714.363040 718.924900\n#&gt; rmse                0.220900   0.226226\n#&gt; specificity         0.931141   0.943784\n\n\n\n#h2o.getModel(\"StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\") %&gt;% \n#h2o.saveModel(path = \"h20_models/\")\n#h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\")\n\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n   model_name &lt;- h2o_leaderboard %&gt;%\n     as_tibble() %&gt;%\n     slice(n) %&gt;%\n     pull(model_id)\n   \n   if (verbose) message(model_name)\n   \n   return(model_name)\n   \n }\n\n\n1 Perfromace_Measures\n\n2 Leaderboard Visualization\n\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\")\nstacked_ensemble_h2o\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              4/6\n#&gt; 3           # GBM base models (used / total)              1/1\n#&gt; 4       # XGBoost base models (used / total)              1/1\n#&gt; 5           # DRF base models (used / total)              2/2\n#&gt; 6  # DeepLearning base models (used / total)              0/1\n#&gt; 7           # GLM base models (used / total)              0/1\n#&gt; 8                      Metalearner algorithm              GLM\n#&gt; 9         Metalearner fold assignment scheme           Random\n#&gt; 10                        Metalearner nfolds                5\n#&gt; 11                   Metalearner fold_column               NA\n#&gt; 12        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.01810005\n#&gt; RMSE:  0.1345364\n#&gt; LogLoss:  0.07634367\n#&gt; Mean Per-Class Error:  0.05581597\n#&gt; AUC:  0.9958702\n#&gt; AUCPR:  0.9766507\n#&gt; Gini:  0.9917404\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     8768   48 0.005445    =48/8816\n#&gt; Yes     127 1069 0.106187   =127/1196\n#&gt; Totals 8895 1117 0.017479  =175/10012\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.507549    0.924341 152\n#&gt; 2                       max f2  0.328729    0.927498 199\n#&gt; 3                 max f0point5  0.560607    0.948497 141\n#&gt; 4                 max accuracy  0.520978    0.982521 149\n#&gt; 5                max precision  0.990603    1.000000   0\n#&gt; 6                   max recall  0.037172    1.000000 330\n#&gt; 7              max specificity  0.990603    1.000000   0\n#&gt; 8             max absolute_mcc  0.507549    0.915155 152\n#&gt; 9   max min_per_class_accuracy  0.256771    0.962375 221\n#&gt; 10 max mean_per_class_accuracy  0.286581    0.964336 212\n#&gt; 11                     max tns  0.990603 8816.000000   0\n#&gt; 12                     max fns  0.990603 1193.000000   0\n#&gt; 13                     max fps  0.000133 8816.000000 399\n#&gt; 14                     max tps  0.037172 1196.000000 330\n#&gt; 15                     max tnr  0.990603    1.000000   0\n#&gt; 16                     max fnr  0.990603    0.997492   0\n#&gt; 17                     max fpr  0.000133    1.000000 399\n#&gt; 18                     max tpr  0.037172    1.000000 330\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.05307124\n#&gt; RMSE:  0.2303719\n#&gt; LogLoss:  0.1755006\n#&gt; Mean Per-Class Error:  0.1422525\n#&gt; AUC:  0.9559094\n#&gt; AUCPR:  0.764386\n#&gt; Gini:  0.9118189\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2903 167 0.054397  =167/3070\n#&gt; Yes     107 358 0.230108   =107/465\n#&gt; Totals 3010 525 0.077511  =274/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.321180    0.723232 197\n#&gt; 2                       max f2  0.117463    0.808907 273\n#&gt; 3                 max f0point5  0.668270    0.740284 102\n#&gt; 4                 max accuracy  0.476674    0.927016 152\n#&gt; 5                max precision  0.989794    1.000000   0\n#&gt; 6                   max recall  0.007681    1.000000 377\n#&gt; 7              max specificity  0.989794    1.000000   0\n#&gt; 8             max absolute_mcc  0.222157    0.682410 228\n#&gt; 9   max min_per_class_accuracy  0.138926    0.894788 265\n#&gt; 10 max mean_per_class_accuracy  0.117463    0.901289 273\n#&gt; 11                     max tns  0.989794 3070.000000   0\n#&gt; 12                     max fns  0.989794  464.000000   0\n#&gt; 13                     max fps  0.000124 3070.000000 399\n#&gt; 14                     max tps  0.007681  465.000000 377\n#&gt; 15                     max tnr  0.989794    1.000000   0\n#&gt; 16                     max fnr  0.989794    0.997849   0\n#&gt; 17                     max fpr  0.000124    1.000000 399\n#&gt; 18                     max tpr  0.007681    1.000000 377\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05033337\n#&gt; RMSE:  0.224351\n#&gt; LogLoss:  0.1690626\n#&gt; Mean Per-Class Error:  0.1484058\n#&gt; AUC:  0.9524157\n#&gt; AUCPR:  0.7405492\n#&gt; Gini:  0.9048314\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9052  427 0.045047   =427/9479\n#&gt; Yes     321  954 0.251765   =321/1275\n#&gt; Totals 9373 1381 0.069556  =748/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.351681    0.718373 195\n#&gt; 2                       max f2  0.186574    0.785848 254\n#&gt; 3                 max f0point5  0.540789    0.723473 140\n#&gt; 4                 max accuracy  0.398860    0.931095 182\n#&gt; 5                max precision  0.993438    1.000000   0\n#&gt; 6                   max recall  0.003036    1.000000 392\n#&gt; 7              max specificity  0.993438    1.000000   0\n#&gt; 8             max absolute_mcc  0.351681    0.679472 195\n#&gt; 9   max min_per_class_accuracy  0.126077    0.890284 281\n#&gt; 10 max mean_per_class_accuracy  0.116063    0.891969 286\n#&gt; 11                     max tns  0.993438 9479.000000   0\n#&gt; 12                     max fns  0.993438 1274.000000   0\n#&gt; 13                     max fps  0.000159 9479.000000 399\n#&gt; 14                     max tps  0.003036 1275.000000 392\n#&gt; 15                     max tnr  0.993438    1.000000   0\n#&gt; 16                     max fnr  0.993438    0.999216   0\n#&gt; 17                     max fpr  0.000159    1.000000 399\n#&gt; 18                     max tpr  0.003036    1.000000 392\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.929345  0.005319   0.924109   0.929130   0.924731   0.937000\n#&gt; auc         0.952534  0.004637   0.954418   0.949007   0.951405   0.959617\n#&gt; err         0.070655  0.005319   0.075891   0.070870   0.075269   0.063000\n#&gt; err_count 152.000000 12.020815 164.000000 154.000000 161.000000 134.000000\n#&gt; f0point5    0.694917  0.031500   0.665796   0.684836   0.674786   0.745247\n#&gt;           cv_5_valid\n#&gt; accuracy    0.931755\n#&gt; auc         0.948222\n#&gt; err         0.068245\n#&gt; err_count 147.000000\n#&gt; f0point5    0.703919\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.677256  0.042879   0.637500   0.664407   0.648734\n#&gt; r2                  0.518104  0.022619   0.506634   0.504903   0.514689\n#&gt; recall              0.780670  0.026987   0.809524   0.780876   0.803922\n#&gt; residual_deviance 726.863950 25.691912 723.790650 743.235100 728.271060\n#&gt; rmse                0.224309  0.003111   0.225441   0.224905   0.225741\n#&gt; specificity         0.949415  0.010140   0.939235   0.948491   0.941083\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.745247   0.690392\n#&gt; r2                  0.557979   0.506318\n#&gt; recall              0.745247   0.763779\n#&gt; residual_deviance 685.950100 753.072940\n#&gt; rmse                0.218854   0.226606\n#&gt; specificity         0.964056   0.954210\n\npredictions &lt;- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#&gt; [1] \"environment\"\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\npredictions_tbl\n\n\n\n  \n\n\n\n\nh2o_models_automl@leaderboard %&gt;% \n              as_tibble() %&gt;% \n              select(-c(mean_per_class_error, rmse, mse))\n\n\n\n  \n\n\n\n\ndata_transformed_tbl &lt;- h2o_models_automl@leaderboard %&gt;%\n        as_tibble() %&gt;%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n        slice(1:15) %&gt;% \n        rownames_to_column(var = \"rowname\") %&gt;%\n        # Visually this step will not change anything\n        # It reorders the factors under the hood\n        mutate(\n          model_id   = as_factor(model_id) %&gt;% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %&gt;% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %&gt;% \n        mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as_factor() %&gt;% fct_rev())\n\n\ndata_transformed_tbl %&gt;%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nplot_h2o_leaderboard &lt;- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by &lt;- tolower(order_by[[1]])\n\n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as.tibble() %&gt;%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n        rownames_to_column(var = \"rowname\") %&gt;%\n        mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n            slice(1:n_max) %&gt;%\n            mutate(\n                model_id   = as_factor(model_id) %&gt;% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %&gt;%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n            slice(1:n_max) %&gt;%\n            mutate(\n                model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %&gt;%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g &lt;- data_transformed_tbl %&gt;%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n\n}\n\n#Grid Search\n\ndeeplearning_h2o &lt;- h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\")\n\n# Take a look for the metrics on the training data set\n# For my model the total error in the confusion matrix is ~15 %\ndeeplearning_h2o\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              4/6\n#&gt; 3           # GBM base models (used / total)              1/1\n#&gt; 4       # XGBoost base models (used / total)              1/1\n#&gt; 5           # DRF base models (used / total)              2/2\n#&gt; 6  # DeepLearning base models (used / total)              0/1\n#&gt; 7           # GLM base models (used / total)              0/1\n#&gt; 8                      Metalearner algorithm              GLM\n#&gt; 9         Metalearner fold assignment scheme           Random\n#&gt; 10                        Metalearner nfolds                5\n#&gt; 11                   Metalearner fold_column               NA\n#&gt; 12        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.01810005\n#&gt; RMSE:  0.1345364\n#&gt; LogLoss:  0.07634367\n#&gt; Mean Per-Class Error:  0.05581597\n#&gt; AUC:  0.9958702\n#&gt; AUCPR:  0.9766507\n#&gt; Gini:  0.9917404\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     8768   48 0.005445    =48/8816\n#&gt; Yes     127 1069 0.106187   =127/1196\n#&gt; Totals 8895 1117 0.017479  =175/10012\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.507549    0.924341 152\n#&gt; 2                       max f2  0.328729    0.927498 199\n#&gt; 3                 max f0point5  0.560607    0.948497 141\n#&gt; 4                 max accuracy  0.520978    0.982521 149\n#&gt; 5                max precision  0.990603    1.000000   0\n#&gt; 6                   max recall  0.037172    1.000000 330\n#&gt; 7              max specificity  0.990603    1.000000   0\n#&gt; 8             max absolute_mcc  0.507549    0.915155 152\n#&gt; 9   max min_per_class_accuracy  0.256771    0.962375 221\n#&gt; 10 max mean_per_class_accuracy  0.286581    0.964336 212\n#&gt; 11                     max tns  0.990603 8816.000000   0\n#&gt; 12                     max fns  0.990603 1193.000000   0\n#&gt; 13                     max fps  0.000133 8816.000000 399\n#&gt; 14                     max tps  0.037172 1196.000000 330\n#&gt; 15                     max tnr  0.990603    1.000000   0\n#&gt; 16                     max fnr  0.990603    0.997492   0\n#&gt; 17                     max fpr  0.000133    1.000000 399\n#&gt; 18                     max tpr  0.037172    1.000000 330\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.05307124\n#&gt; RMSE:  0.2303719\n#&gt; LogLoss:  0.1755006\n#&gt; Mean Per-Class Error:  0.1422525\n#&gt; AUC:  0.9559094\n#&gt; AUCPR:  0.764386\n#&gt; Gini:  0.9118189\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2903 167 0.054397  =167/3070\n#&gt; Yes     107 358 0.230108   =107/465\n#&gt; Totals 3010 525 0.077511  =274/3535\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.321180    0.723232 197\n#&gt; 2                       max f2  0.117463    0.808907 273\n#&gt; 3                 max f0point5  0.668270    0.740284 102\n#&gt; 4                 max accuracy  0.476674    0.927016 152\n#&gt; 5                max precision  0.989794    1.000000   0\n#&gt; 6                   max recall  0.007681    1.000000 377\n#&gt; 7              max specificity  0.989794    1.000000   0\n#&gt; 8             max absolute_mcc  0.222157    0.682410 228\n#&gt; 9   max min_per_class_accuracy  0.138926    0.894788 265\n#&gt; 10 max mean_per_class_accuracy  0.117463    0.901289 273\n#&gt; 11                     max tns  0.989794 3070.000000   0\n#&gt; 12                     max fns  0.989794  464.000000   0\n#&gt; 13                     max fps  0.000124 3070.000000 399\n#&gt; 14                     max tps  0.007681  465.000000 377\n#&gt; 15                     max tnr  0.989794    1.000000   0\n#&gt; 16                     max fnr  0.989794    0.997849   0\n#&gt; 17                     max fpr  0.000124    1.000000 399\n#&gt; 18                     max tpr  0.007681    1.000000 377\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05033337\n#&gt; RMSE:  0.224351\n#&gt; LogLoss:  0.1690626\n#&gt; Mean Per-Class Error:  0.1484058\n#&gt; AUC:  0.9524157\n#&gt; AUCPR:  0.7405492\n#&gt; Gini:  0.9048314\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error        Rate\n#&gt; No     9052  427 0.045047   =427/9479\n#&gt; Yes     321  954 0.251765   =321/1275\n#&gt; Totals 9373 1381 0.069556  =748/10754\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.351681    0.718373 195\n#&gt; 2                       max f2  0.186574    0.785848 254\n#&gt; 3                 max f0point5  0.540789    0.723473 140\n#&gt; 4                 max accuracy  0.398860    0.931095 182\n#&gt; 5                max precision  0.993438    1.000000   0\n#&gt; 6                   max recall  0.003036    1.000000 392\n#&gt; 7              max specificity  0.993438    1.000000   0\n#&gt; 8             max absolute_mcc  0.351681    0.679472 195\n#&gt; 9   max min_per_class_accuracy  0.126077    0.890284 281\n#&gt; 10 max mean_per_class_accuracy  0.116063    0.891969 286\n#&gt; 11                     max tns  0.993438 9479.000000   0\n#&gt; 12                     max fns  0.993438 1274.000000   0\n#&gt; 13                     max fps  0.000159 9479.000000 399\n#&gt; 14                     max tps  0.003036 1275.000000 392\n#&gt; 15                     max tnr  0.993438    1.000000   0\n#&gt; 16                     max fnr  0.993438    0.999216   0\n#&gt; 17                     max fpr  0.000159    1.000000 399\n#&gt; 18                     max tpr  0.003036    1.000000 392\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.929345  0.005319   0.924109   0.929130   0.924731   0.937000\n#&gt; auc         0.952534  0.004637   0.954418   0.949007   0.951405   0.959617\n#&gt; err         0.070655  0.005319   0.075891   0.070870   0.075269   0.063000\n#&gt; err_count 152.000000 12.020815 164.000000 154.000000 161.000000 134.000000\n#&gt; f0point5    0.694917  0.031500   0.665796   0.684836   0.674786   0.745247\n#&gt;           cv_5_valid\n#&gt; accuracy    0.931755\n#&gt; auc         0.948222\n#&gt; err         0.068245\n#&gt; err_count 147.000000\n#&gt; f0point5    0.703919\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.677256  0.042879   0.637500   0.664407   0.648734\n#&gt; r2                  0.518104  0.022619   0.506634   0.504903   0.514689\n#&gt; recall              0.780670  0.026987   0.809524   0.780876   0.803922\n#&gt; residual_deviance 726.863950 25.691912 723.790650 743.235100 728.271060\n#&gt; rmse                0.224309  0.003111   0.225441   0.224905   0.225741\n#&gt; specificity         0.949415  0.010140   0.939235   0.948491   0.941083\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.745247   0.690392\n#&gt; r2                  0.557979   0.506318\n#&gt; recall              0.745247   0.763779\n#&gt; residual_deviance 685.950100 753.072940\n#&gt; rmse                0.218854   0.226606\n#&gt; specificity         0.964056   0.954210\n\n# We want to see how it performs for the testing data frame\ntest_tbl\n\n\n\n  \n\n\n# Make sure to convert it to an h20 object\n# Accuracy of the confusion matrix shows ~85 % accuracy\nh2o.performance(deeplearning_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; \n#&gt; MSE:  0.02887724\n#&gt; RMSE:  0.169933\n#&gt; LogLoss:  0.106129\n#&gt; Mean Per-Class Error:  0.09435641\n#&gt; AUC:  0.9833255\n#&gt; AUCPR:  0.9024144\n#&gt; Gini:  0.9666509\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     4141  84 0.019882   =84/4225\n#&gt; Yes      91 448 0.168831    =91/539\n#&gt; Totals 4232 532 0.036734  =175/4764\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.439203    0.836601 168\n#&gt; 2                       max f2  0.208162    0.858864 239\n#&gt; 3                 max f0point5  0.673595    0.877522 111\n#&gt; 4                 max accuracy  0.499494    0.964106 153\n#&gt; 5                max precision  0.988748    1.000000   0\n#&gt; 6                   max recall  0.010708    1.000000 370\n#&gt; 7              max specificity  0.988748    1.000000   0\n#&gt; 8             max absolute_mcc  0.439203    0.815932 168\n#&gt; 9   max min_per_class_accuracy  0.181888    0.933254 250\n#&gt; 10 max mean_per_class_accuracy  0.148883    0.936000 264\n#&gt; 11                     max tns  0.988748 4225.000000   0\n#&gt; 12                     max fns  0.988748  537.000000   0\n#&gt; 13                     max fps  0.000063 4225.000000 399\n#&gt; 14                     max tps  0.010708  539.000000 370\n#&gt; 15                     max tnr  0.988748    1.000000   0\n#&gt; 16                     max fnr  0.988748    0.996289   0\n#&gt; 17                     max fpr  0.000063    1.000000 399\n#&gt; 18                     max tpr  0.010708    1.000000 370\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\n\n\ndeeplearning_grid_01 &lt;- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\ndeeplearning_grid_01\n\n#&gt; H2O Grid Details\n#&gt; ================\n#&gt; \n#&gt; Grid ID: deeplearning_grid_01 \n#&gt; Used hyper parameters: \n#&gt;   -  epochs \n#&gt;   -  hidden \n#&gt; Number of models: 18 \n#&gt; Number of failed models: 0 \n#&gt; \n#&gt; Hyper-Parameter Search Summary: ordered by increasing logloss\n#&gt;       epochs       hidden                     model_ids logloss\n#&gt; 1  103.99996 [10, 10, 10]  deeplearning_grid_01_model_3 0.28710\n#&gt; 2   51.98304 [50, 20, 10] deeplearning_grid_01_model_14 0.29250\n#&gt; 3  104.02236 [50, 20, 10]  deeplearning_grid_01_model_6 0.29250\n#&gt; 4  103.98042 [10, 10, 10] deeplearning_grid_01_model_12 0.29300\n#&gt; 5   51.99076 [50, 20, 10]  deeplearning_grid_01_model_5 0.29743\n#&gt; 6   52.00923 [20, 20, 20] deeplearning_grid_01_model_17 0.29927\n#&gt; 7  103.98958 [50, 20, 10] deeplearning_grid_01_model_15 0.30232\n#&gt; 8   52.00483 [20, 20, 20]  deeplearning_grid_01_model_8 0.30362\n#&gt; 9   52.01281 [10, 10, 10] deeplearning_grid_01_model_11 0.30597\n#&gt; 10 104.01125 [20, 20, 20] deeplearning_grid_01_model_18 0.30711\n#&gt; 11 104.03135 [20, 20, 20]  deeplearning_grid_01_model_9 0.31048\n#&gt; 12  51.99077 [10, 10, 10]  deeplearning_grid_01_model_2 0.31234\n#&gt; 13  10.40983 [20, 20, 20]  deeplearning_grid_01_model_7 0.32015\n#&gt; 14  10.39268 [20, 20, 20] deeplearning_grid_01_model_16 0.32501\n#&gt; 15  10.40422 [50, 20, 10] deeplearning_grid_01_model_13 0.32726\n#&gt; 16  10.39963 [10, 10, 10]  deeplearning_grid_01_model_1 0.32765\n#&gt; 17  10.40988 [50, 20, 10]  deeplearning_grid_01_model_4 0.32783\n#&gt; 18  10.40521 [10, 10, 10] deeplearning_grid_01_model_10 0.34122\n\n\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n#&gt; H2O Grid Details\n#&gt; ================\n#&gt; \n#&gt; Grid ID: deeplearning_grid_01 \n#&gt; Used hyper parameters: \n#&gt;   -  epochs \n#&gt;   -  hidden \n#&gt; Number of models: 18 \n#&gt; Number of failed models: 0 \n#&gt; \n#&gt; Hyper-Parameter Search Summary: ordered by decreasing auc\n#&gt;       epochs       hidden                     model_ids     auc\n#&gt; 1  103.99996 [10, 10, 10]  deeplearning_grid_01_model_3 0.84890\n#&gt; 2  103.98958 [50, 20, 10] deeplearning_grid_01_model_15 0.84365\n#&gt; 3  104.02236 [50, 20, 10]  deeplearning_grid_01_model_6 0.83964\n#&gt; 4  103.98042 [10, 10, 10] deeplearning_grid_01_model_12 0.83695\n#&gt; 5  104.01125 [20, 20, 20] deeplearning_grid_01_model_18 0.83311\n#&gt; 6   51.98304 [50, 20, 10] deeplearning_grid_01_model_14 0.82526\n#&gt; 7  104.03135 [20, 20, 20]  deeplearning_grid_01_model_9 0.82228\n#&gt; 8   51.99076 [50, 20, 10]  deeplearning_grid_01_model_5 0.81895\n#&gt; 9   52.01281 [10, 10, 10] deeplearning_grid_01_model_11 0.81670\n#&gt; 10  52.00483 [20, 20, 20]  deeplearning_grid_01_model_8 0.81665\n#&gt; 11  52.00923 [20, 20, 20] deeplearning_grid_01_model_17 0.81525\n#&gt; 12  51.99077 [10, 10, 10]  deeplearning_grid_01_model_2 0.79966\n#&gt; 13  10.40983 [20, 20, 20]  deeplearning_grid_01_model_7 0.76470\n#&gt; 14  10.39268 [20, 20, 20] deeplearning_grid_01_model_16 0.76259\n#&gt; 15  10.40422 [50, 20, 10] deeplearning_grid_01_model_13 0.75132\n#&gt; 16  10.40521 [10, 10, 10] deeplearning_grid_01_model_10 0.74554\n#&gt; 17  10.40988 [50, 20, 10]  deeplearning_grid_01_model_4 0.74123\n#&gt; 18  10.39963 [10, 10, 10]  deeplearning_grid_01_model_1 0.73136\n\n\n\n#h2o.getModel(\"deeplearning_grid_01_model_3\") %&gt;% \n#h2o.saveModel(path = \"h20_models/\")\n\n\ndeeplearning_grid_01_model_3 &lt;- h2o.getModel(\"deeplearning_grid_01_model_3\")\n\ndeeplearning_grid_01_model_3 %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\n#&gt;     train     valid      xval \n#&gt; 0.8779555 0.8627313 0.8489038\n\n##     train     valid      xval \n## 0.9093134 0.7922078 0.8299115 \n\n# We can tell the model is overfitting because of the huge difference between training AUC and the validation / cross validation AUC\n\n# Run it on the test data\ndeeplearning_grid_01_model_3 %&gt;%\n    h2o.performance(newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; \n#&gt; MSE:  0.0704288\n#&gt; RMSE:  0.2653843\n#&gt; LogLoss:  0.2401828\n#&gt; Mean Per-Class Error:  0.2465743\n#&gt; AUC:  0.8857398\n#&gt; AUCPR:  0.5438077\n#&gt; Gini:  0.7714795\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     3960 265 0.062722  =265/4225\n#&gt; Yes     232 307 0.430427   =232/539\n#&gt; Totals 4192 572 0.104324  =497/4764\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.285987    0.552655 177\n#&gt; 2                       max f2  0.141805    0.643318 258\n#&gt; 3                 max f0point5  0.428543    0.570962 120\n#&gt; 4                 max accuracy  0.448555    0.907011 115\n#&gt; 5                max precision  0.985704    1.000000   0\n#&gt; 6                   max recall  0.000761    1.000000 398\n#&gt; 7              max specificity  0.985704    1.000000   0\n#&gt; 8             max absolute_mcc  0.285987    0.493946 177\n#&gt; 9   max min_per_class_accuracy  0.143473    0.808284 257\n#&gt; 10 max mean_per_class_accuracy  0.141805    0.810549 258\n#&gt; 11                     max tns  0.985704 4225.000000   0\n#&gt; 12                     max fns  0.985704  537.000000   0\n#&gt; 13                     max fps  0.000066 4225.000000 399\n#&gt; 14                     max tps  0.000761  539.000000 398\n#&gt; 15                     max tnr  0.985704    1.000000   0\n#&gt; 16                     max fnr  0.985704    0.996289   0\n#&gt; 17                     max fpr  0.000066    1.000000 399\n#&gt; 18                     max tpr  0.000761    1.000000 398\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\n\n\n3 H2O Performance\n\n# 4. Assessing Performance ----\nstacked_ensemble_1_h2o &lt;- h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\")\nstacked_ensemble_2_h2o     &lt;- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_3_20240613_45256\")\ndl_h20     &lt;- h2o.loadModel(\"h20_models/deeplearning_grid_01_model_3\")\n\n\nperformance_h2o &lt;- h2o.performance(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(performance_h2o)\n\n#&gt; [1] \"S4\"\n\nperformance_h2o %&gt;% slotNames()\n\n#&gt; [1] \"algorithm\" \"on_train\"  \"on_valid\"  \"on_xval\"   \"metrics\"\n\n# We are focusing on the slot metrics. This slot contains all possible metrics\nperformance_h2o@metrics\n\n#&gt; $model\n#&gt; $model$`__meta`\n#&gt; $model$`__meta`$schema_version\n#&gt; [1] 3\n#&gt; \n#&gt; $model$`__meta`$schema_name\n#&gt; [1] \"ModelKeyV3\"\n#&gt; \n#&gt; $model$`__meta`$schema_type\n#&gt; [1] \"Key&lt;Model&gt;\"\n#&gt; \n#&gt; \n#&gt; $model$name\n#&gt; [1] \"StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\"\n#&gt; \n#&gt; $model$type\n#&gt; [1] \"Key&lt;Model&gt;\"\n#&gt; \n#&gt; $model$URL\n#&gt; [1] \"/3/Models/StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\"\n#&gt; \n#&gt; \n#&gt; $model_checksum\n#&gt; [1] \"-5171862051532879712\"\n#&gt; \n#&gt; $frame\n#&gt; $frame$name\n#&gt; [1] \"test_tbl_sid_9b2c_229\"\n#&gt; \n#&gt; \n#&gt; $frame_checksum\n#&gt; [1] \"-163791205201284736\"\n#&gt; \n#&gt; $description\n#&gt; NULL\n#&gt; \n#&gt; $scoring_time\n#&gt; [1] 1.71825e+12\n#&gt; \n#&gt; $predictions\n#&gt; NULL\n#&gt; \n#&gt; $MSE\n#&gt; [1] 0.02887724\n#&gt; \n#&gt; $RMSE\n#&gt; [1] 0.169933\n#&gt; \n#&gt; $nobs\n#&gt; [1] 4764\n#&gt; \n#&gt; $custom_metric_name\n#&gt; NULL\n#&gt; \n#&gt; $custom_metric_value\n#&gt; [1] 0\n#&gt; \n#&gt; $r2\n#&gt; [1] 0.7122047\n#&gt; \n#&gt; $logloss\n#&gt; [1] 0.106129\n#&gt; \n#&gt; $AUC\n#&gt; [1] 0.9833255\n#&gt; \n#&gt; $pr_auc\n#&gt; [1] 0.9024144\n#&gt; \n#&gt; $Gini\n#&gt; [1] 0.9666509\n#&gt; \n#&gt; $mean_per_class_error\n#&gt; [1] 0.09435641\n#&gt; \n#&gt; $domain\n#&gt; [1] \"No\"  \"Yes\"\n#&gt; \n#&gt; $cm\n#&gt; $cm$`__meta`\n#&gt; $cm$`__meta`$schema_version\n#&gt; [1] 3\n#&gt; \n#&gt; $cm$`__meta`$schema_name\n#&gt; [1] \"ConfusionMatrixV3\"\n#&gt; \n#&gt; $cm$`__meta`$schema_type\n#&gt; [1] \"ConfusionMatrix\"\n#&gt; \n#&gt; \n#&gt; $cm$table\n#&gt; Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#&gt;          No Yes  Error          Rate\n#&gt; No     4141  84 0.0199 =  84 / 4,225\n#&gt; Yes      91 448 0.1688 =    91 / 539\n#&gt; Totals 4232 532 0.0367 = 175 / 4,764\n#&gt; \n#&gt; \n#&gt; $thresholds_and_metric_scores\n#&gt; Metrics for Thresholds: Binomial metrics as a function of classification thresholds\n#&gt;   threshold       f1       f2 f0point5 accuracy precision   recall specificity\n#&gt; 1  0.988748 0.007394 0.004634 0.018282 0.887280  1.000000 0.003711    1.000000\n#&gt; 2  0.981978 0.011070 0.006948 0.027223 0.887490  1.000000 0.005566    1.000000\n#&gt; 3  0.979400 0.022018 0.013876 0.053286 0.888119  1.000000 0.011132    1.000000\n#&gt; 4  0.976462 0.036430 0.023084 0.086356 0.888959  1.000000 0.018553    1.000000\n#&gt; 5  0.973884 0.043557 0.027675 0.102215 0.889379  1.000000 0.022263    1.000000\n#&gt;   absolute_mcc min_per_class_accuracy mean_per_class_accuracy  tns fns fps tps\n#&gt; 1     0.057377               0.003711                0.501855 4225 537   0   2\n#&gt; 2     0.070280               0.005566                0.502783 4225 536   0   3\n#&gt; 3     0.099422               0.011132                0.505566 4225 533   0   6\n#&gt; 4     0.128407               0.018553                0.509276 4225 529   0  10\n#&gt; 5     0.140693               0.022263                0.511132 4225 527   0  12\n#&gt;        tnr      fnr      fpr      tpr idx\n#&gt; 1 1.000000 0.996289 0.000000 0.003711   0\n#&gt; 2 1.000000 0.994434 0.000000 0.005566   1\n#&gt; 3 1.000000 0.988868 0.000000 0.011132   2\n#&gt; 4 1.000000 0.981447 0.000000 0.018553   3\n#&gt; 5 1.000000 0.977737 0.000000 0.022263   4\n#&gt; \n#&gt; ---\n#&gt;     threshold       f1       f2 f0point5 accuracy precision   recall\n#&gt; 395  0.001362 0.213423 0.404169 0.144994 0.166037  0.119459 1.000000\n#&gt; 396  0.001113 0.210835 0.400446 0.143085 0.153023  0.117840 1.000000\n#&gt; 397  0.000773 0.208712 0.397375 0.141522 0.142107  0.116515 1.000000\n#&gt; 398  0.000515 0.207547 0.395683 0.140665 0.136020  0.115789 1.000000\n#&gt; 399  0.000172 0.204360 0.391033 0.138326 0.119018  0.113809 1.000000\n#&gt; 400  0.000063 0.203281 0.389451 0.137535 0.113140  0.113140 1.000000\n#&gt;     specificity absolute_mcc min_per_class_accuracy mean_per_class_accuracy tns\n#&gt; 395    0.059645     0.084411               0.059645                0.529822 252\n#&gt; 396    0.044970     0.072796               0.044970                0.522485 190\n#&gt; 397    0.032663     0.061690               0.032663                0.516331 138\n#&gt; 398    0.025799     0.054656               0.025799                0.512899 109\n#&gt; 399    0.006627     0.027463               0.006627                0.503314  28\n#&gt; 400    0.000000     0.000000               0.000000                0.500000   0\n#&gt;     fns  fps tps      tnr      fnr      fpr      tpr idx\n#&gt; 395   0 3973 539 0.059645 0.000000 0.940355 1.000000 394\n#&gt; 396   0 4035 539 0.044970 0.000000 0.955030 1.000000 395\n#&gt; 397   0 4087 539 0.032663 0.000000 0.967337 1.000000 396\n#&gt; 398   0 4116 539 0.025799 0.000000 0.974201 1.000000 397\n#&gt; 399   0 4197 539 0.006627 0.000000 0.993373 1.000000 398\n#&gt; 400   0 4225 539 0.000000 0.000000 1.000000 1.000000 399\n#&gt; \n#&gt; $max_criteria_and_metric_scores\n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.439203    0.836601 168\n#&gt; 2                       max f2  0.208162    0.858864 239\n#&gt; 3                 max f0point5  0.673595    0.877522 111\n#&gt; 4                 max accuracy  0.499494    0.964106 153\n#&gt; 5                max precision  0.988748    1.000000   0\n#&gt; 6                   max recall  0.010708    1.000000 370\n#&gt; 7              max specificity  0.988748    1.000000   0\n#&gt; 8             max absolute_mcc  0.439203    0.815932 168\n#&gt; 9   max min_per_class_accuracy  0.181888    0.933254 250\n#&gt; 10 max mean_per_class_accuracy  0.148883    0.936000 264\n#&gt; 11                     max tns  0.988748 4225.000000   0\n#&gt; 12                     max fns  0.988748  537.000000   0\n#&gt; 13                     max fps  0.000063 4225.000000 399\n#&gt; 14                     max tps  0.010708  539.000000 370\n#&gt; 15                     max tnr  0.988748    1.000000   0\n#&gt; 16                     max fnr  0.988748    0.996289   0\n#&gt; 17                     max fpr  0.000063    1.000000 399\n#&gt; 18                     max tpr  0.010708    1.000000 370\n#&gt; \n#&gt; $gains_lift_table\n#&gt; Gains/Lift Table: Avg response rate: 11.31 %, avg score: 12.19 %\n#&gt;    group cumulative_data_fraction lower_threshold     lift cumulative_lift\n#&gt; 1      1               0.01007557        0.951938 8.470315        8.470315\n#&gt; 2      2               0.02015113        0.929492 8.654453        8.562384\n#&gt; 3      3               0.03001679        0.904318 8.838590        8.653165\n#&gt; 4      4               0.04009236        0.881733 8.286178        8.560938\n#&gt; 5      5               0.05016793        0.857929 8.470315        8.542738\n#&gt; 6      6               0.10012594        0.511138 7.093154        7.819465\n#&gt; 7      7               0.15008396        0.234153 2.413901        6.020131\n#&gt; 8      8               0.20004198        0.109600 1.299793        4.841284\n#&gt; 9      9               0.29995802        0.041299 0.185685        3.290504\n#&gt; 10    10               0.40008396        0.020586 0.092648        2.490201\n#&gt; 11    11               0.50000000        0.012875 0.018568        1.996289\n#&gt; 12    12               0.59991604        0.008750 0.018568        1.666900\n#&gt; 13    13               0.70004198        0.005807 0.000000        1.428486\n#&gt; 14    14               0.79995802        0.003709 0.000000        1.250066\n#&gt; 15    15               0.89987406        0.002032 0.000000        1.111267\n#&gt; 16    16               1.00000000        0.000016 0.000000        1.000000\n#&gt;    response_rate    score cumulative_response_rate cumulative_score\n#&gt; 1       0.958333 0.966972                 0.958333         0.966972\n#&gt; 2       0.979167 0.940951                 0.968750         0.953962\n#&gt; 3       1.000000 0.919383                 0.979021         0.942597\n#&gt; 4       0.937500 0.892822                 0.968586         0.930088\n#&gt; 5       0.958333 0.870866                 0.966527         0.918194\n#&gt; 6       0.802521 0.718350                 0.884696         0.818481\n#&gt; 7       0.273109 0.360146                 0.681119         0.665916\n#&gt; 8       0.147059 0.159905                 0.547744         0.539546\n#&gt; 9       0.021008 0.068114                 0.372288         0.382512\n#&gt; 10      0.010482 0.028945                 0.281742         0.294028\n#&gt; 11      0.002101 0.016174                 0.225861         0.238503\n#&gt; 12      0.002101 0.010640                 0.188593         0.200553\n#&gt; 13      0.000000 0.007199                 0.161619         0.172898\n#&gt; 14      0.000000 0.004684                 0.141433         0.151887\n#&gt; 15      0.000000 0.002850                 0.125729         0.135339\n#&gt; 16      0.000000 0.001061                 0.113140         0.121895\n#&gt;    capture_rate cumulative_capture_rate        gain cumulative_gain\n#&gt; 1      0.085343                0.085343  747.031540      747.031540\n#&gt; 2      0.087199                0.172542  765.445269      756.238404\n#&gt; 3      0.087199                0.259740  783.858998      765.316502\n#&gt; 4      0.083488                0.343228  728.617811      756.093794\n#&gt; 5      0.085343                0.428571  747.031540      754.273760\n#&gt; 6      0.354360                0.782931  609.315414      681.946535\n#&gt; 7      0.120594                0.903525  141.390063      502.013052\n#&gt; 8      0.064935                0.968460   29.979264      384.128433\n#&gt; 9      0.018553                0.987013  -81.431534      229.050376\n#&gt; 10     0.009276                0.996289  -90.735231      149.020085\n#&gt; 11     0.001855                0.998145  -98.143153       99.628942\n#&gt; 12     0.001855                1.000000  -98.143153       66.689993\n#&gt; 13     0.000000                1.000000 -100.000000       42.848576\n#&gt; 14     0.000000                1.000000 -100.000000       25.006560\n#&gt; 15     0.000000                1.000000 -100.000000       11.126662\n#&gt; 16     0.000000                1.000000 -100.000000        0.000000\n#&gt;    kolmogorov_smirnov\n#&gt; 1            0.084870\n#&gt; 2            0.171832\n#&gt; 3            0.259030\n#&gt; 4            0.341808\n#&gt; 5            0.426678\n#&gt; 6            0.769914\n#&gt; 7            0.849561\n#&gt; 8            0.866448\n#&gt; 9            0.774705\n#&gt; 10           0.672266\n#&gt; 11           0.561695\n#&gt; 12           0.451124\n#&gt; 13           0.338225\n#&gt; 14           0.225562\n#&gt; 15           0.112899\n#&gt; 16           0.000000\n#&gt; \n#&gt; $residual_deviance\n#&gt; [1] 1011.197\n#&gt; \n#&gt; $null_deviance\n#&gt; [1] 3365.035\n#&gt; \n#&gt; $AIC\n#&gt; [1] 1021.197\n#&gt; \n#&gt; $loglikelihood\n#&gt; [1] 0\n#&gt; \n#&gt; $null_degrees_of_freedom\n#&gt; [1] 4763\n#&gt; \n#&gt; $residual_degrees_of_freedom\n#&gt; [1] 4759\n\n\n\n# Classifier Summary Metrics\n\nh2o.auc(performance_h2o, train = T, valid = T, xval = T)\n\n#&gt; [1] 0.9833255\n\n# Caution: \"train, \"val\", and \"xval\" arugments only work for models (not performance objects)\nh2o.auc(stacked_ensemble_h2o, train = T, valid = T, xval = T)\n\n#&gt;     train     valid      xval \n#&gt; 0.9958702 0.9559094 0.9524157\n\nh2o.giniCoef(performance_h2o)\n\n#&gt; [1] 0.9666509\n\nh2o.logloss(performance_h2o)\n\n#&gt; [1] 0.106129\n\n# result for the training data\nh2o.confusionMatrix(stacked_ensemble_h2o)\n\n\n\n  \n\n\n# result for the hold out set\nh2o.confusionMatrix(performance_h2o)\n\n\n\n  \n\n\n\n\n# Precision vs Recall Plot\n\n# This is on the test set\nperformance_tbl &lt;- performance_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as.tibble() \n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\nperformance_tbl %&gt;% \n  glimpse()\n\n#&gt; Rows: 400\n#&gt; Columns: 20\n#&gt; $ threshold               &lt;dbl&gt; 0.9887484, 0.9819775, 0.9793995, 0.9764618, 0.…\n#&gt; $ f1                      &lt;dbl&gt; 0.007393715, 0.011070111, 0.022018349, 0.03642…\n#&gt; $ f2                      &lt;dbl&gt; 0.004633920, 0.006947661, 0.013876041, 0.02308…\n#&gt; $ f0point5                &lt;dbl&gt; 0.01828154, 0.02722323, 0.05328597, 0.08635579…\n#&gt; $ accuracy                &lt;dbl&gt; 0.8872796, 0.8874895, 0.8881192, 0.8889589, 0.…\n#&gt; $ precision               &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#&gt; $ recall                  &lt;dbl&gt; 0.003710575, 0.005565863, 0.011131725, 0.01855…\n#&gt; $ specificity             &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#&gt; $ absolute_mcc            &lt;dbl&gt; 0.05737719, 0.07027980, 0.09942197, 0.12840720…\n#&gt; $ min_per_class_accuracy  &lt;dbl&gt; 0.003710575, 0.005565863, 0.011131725, 0.01855…\n#&gt; $ mean_per_class_accuracy &lt;dbl&gt; 0.5018553, 0.5027829, 0.5055659, 0.5092764, 0.…\n#&gt; $ tns                     &lt;dbl&gt; 4225, 4225, 4225, 4225, 4225, 4225, 4224, 4224…\n#&gt; $ fns                     &lt;dbl&gt; 537, 536, 533, 529, 527, 521, 518, 516, 509, 5…\n#&gt; $ fps                     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2…\n#&gt; $ tps                     &lt;dbl&gt; 2, 3, 6, 10, 12, 18, 21, 23, 30, 32, 37, 42, 4…\n#&gt; $ tnr                     &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#&gt; $ fnr                     &lt;dbl&gt; 0.9962894, 0.9944341, 0.9888683, 0.9814471, 0.…\n#&gt; $ fpr                     &lt;dbl&gt; 0.0000000000, 0.0000000000, 0.0000000000, 0.00…\n#&gt; $ tpr                     &lt;dbl&gt; 0.003710575, 0.005565863, 0.011131725, 0.01855…\n#&gt; $ idx                     &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, …\n\n\n\ntheme_new &lt;- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      ) \n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n\nperformance_tbl %&gt;%\n    filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %&gt;%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n4 ROC Plot\n\npath &lt;- \"h20_models/StackedEnsemble_BestOfFamily_4_AutoML_3_20240613_45256\"\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n    \n    model_h2o &lt;- h2o.loadModel(path)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n        h2o.metric() %&gt;%\n        as_tibble() %&gt;%\n        mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n        select(tpr, fpr, auc)\n    \n}\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"h20_models/\") %&gt;%\n    select(path) %&gt;%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n    unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\nmodel_metrics_tbl %&gt;%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %&gt;% as_factor(),\n        auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n        ) %&gt;%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n\n\n\n\n\n\n\n# Precision vs Recall\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n    \n    model_h2o &lt;- h2o.loadModel(path)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n        h2o.metric() %&gt;%\n        as_tibble() %&gt;%\n        mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"h20_models/\") %&gt;%\n    select(path) %&gt;%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n    unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %&gt;%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %&gt;% as_factor(),\n        auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n    ) %&gt;%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n\n\n\n\n\n\n\n# Gain & Lift\n\nranked_predictions_tbl &lt;- predictions_tbl %&gt;%\n    bind_cols(test_tbl) %&gt;%\n    select(predict:Yes, went_on_backorder) %&gt;%\n    # Sorting from highest to lowest class probability\n    arrange(desc(Yes))\n\n\nranked_predictions_tbl %&gt;%\n    mutate(ntile = ntile(Yes, n = 10)) %&gt;%\n    group_by(ntile) %&gt;%\n    summarise(\n        cases = n(),\n        responses = sum(went_on_backorder == \"Yes\")\n    ) %&gt;%\n    arrange(desc(ntile))\n\n\n\n  \n\n\n\n\ncalculated_gain_lift_tbl &lt;- ranked_predictions_tbl %&gt;%\n    mutate(ntile = ntile(Yes, n = 10)) %&gt;%\n    group_by(ntile) %&gt;%\n    summarise(\n        cases = n(),\n        responses = sum(went_on_backorder == \"Yes\")\n    ) %&gt;%\n    arrange(desc(ntile)) %&gt;%\n    \n    # Add group numbers (opposite of ntile)\n    mutate(group = row_number()) %&gt;%\n    select(group, cases, responses) %&gt;%\n    \n    # Calculations\n    mutate(\n        cumulative_responses = cumsum(responses),\n        pct_responses        = responses / sum(responses),\n        gain                 = cumsum(pct_responses),\n        cumulative_pct_cases = cumsum(cases) / sum(cases),\n        lift                 = gain / cumulative_pct_cases,\n        gain_baseline        = cumulative_pct_cases,\n        lift_baseline        = gain_baseline / cumulative_pct_cases\n    )\n\ncalculated_gain_lift_tbl \n\n\n\n  \n\n\n\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n    h2o.gainsLift() %&gt;%\n    as.tibble()\n\n## Gain Chart\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"lift\")) %&gt;%\n    mutate(baseline = cumulative_data_fraction) %&gt;%\n    rename(gain     = cumulative_capture_rate) %&gt;%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n\n\n\n\n\n\n\n\n## Lift Plot\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"capture\")) %&gt;%\n    mutate(baseline = 1) %&gt;%\n    rename(lift = cumulative_lift) %&gt;%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n\n\n\n\n\n\n\n\n# 5. Performance Visualization ----  \nlibrary(cowplot)\nlibrary(glue)\n\n#&gt; \n#&gt; Attaching package: 'glue'\n\n\n#&gt; The following object is masked from 'package:sjmisc':\n#&gt; \n#&gt;     trim\n\n# set values to test the function while building it\nh2o_leaderboard &lt;- h2o_models_automl@leaderboard\nnewdata &lt;- test_tbl\norder_by &lt;- \"auc\"\nmax_models &lt;- 4\nsize &lt;- 1\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as_tibble() %&gt;%\n        slice(1:max_models)\n    \n    newdata_tbl &lt;- newdata %&gt;%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      &lt;- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr &lt;- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %&gt;%\n            h2o.metric() %&gt;%\n            as.tibble() %&gt;%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n          model_id = as_factor(model_id) %&gt;% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %&gt;% \n                      round(3) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %&gt;% \n                      round(4) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift &lt;- function(model_id, test_tbl) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %&gt;%\n            h2o.gainsLift() %&gt;%\n            as.tibble() %&gt;%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n            model_id = as_factor(model_id) %&gt;% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %&gt;% \n                round(3) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %&gt;% \n                round(4) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id))\n        ) %&gt;%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend &lt;- get_legend(p1)\n    # Remove legend from p1\n    p1 &lt;- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title &lt;- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle &lt;- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nh2o_models_automl@leaderboard %&gt;%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)\n\n#&gt; Warning in get_plot_component(plot, \"guide-box\"): Multiple components found;\n#&gt; returning the first one. To return all, use `return_all = TRUE`."
  },
  {
    "objectID": "content/01_journal/Supervised_ML_Regression_2.html",
    "href": "content/01_journal/Supervised_ML_Regression_2.html",
    "title": "\n1 Libraries",
    "section": "",
    "text": "1 Libraries\n\n# install packages\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\n\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n\n2 Modeling\n\nbike_data_tbl &lt;- readRDS(\"bike_orderlines.rds\")\nbike_data_tbl\n\n\n\n  \n\n\n\n\nmodel_sales_tbl &lt;- bike_data_tbl %&gt;%\n  select(total_price, model, category_2, frame_material) %&gt;%\n  \n  group_by(model, category_2, frame_material) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  \n  arrange(desc(total_sales))\n\n#&gt; `summarise()` has grouped output by 'model', 'category_2'. You can override\n#&gt; using the `.groups` argument.\n\n\n\nmodel_sales_tbl %&gt;%\n  mutate(category_2 = as_factor(category_2) %&gt;% \n           fct_reorder(total_sales, .fun = max) %&gt;% \n           fct_rev()) %&gt;%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\n\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n\n\n#&gt; Warning in max(data$density, na.rm = TRUE): no non-missing arguments to max;\n#&gt; returning -Inf\n\n\n#&gt; Warning: Computation failed in `stat_ydensity()`.\n#&gt; Caused by error in `$&lt;-.data.frame`:\n#&gt; ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\n\nbike_features_tbl &lt;- readRDS(\"bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n  ) %&gt;%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %&gt;% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  mutate(id = row_number()) %&gt;% \n  mutate(frame_material = factor(frame_material)) %&gt;%\n  select(id, everything()) \nbike_features_tbl %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %&gt;% training() %&gt;% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %&gt;% testing() %&gt;% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\ntrain_data &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\n\n\n3 Recipe\n\nbike_recipe &lt;- recipe(frame_material ~ ., data = train_data) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes()) %&gt;% \n  step_zv(all_predictors()) \nd &lt;- summary(bike_recipe)\nlr_mod &lt;- logistic_reg() %&gt;% \n  set_engine(\"glm\")\nlr_mod\n\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_workflow &lt;- workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(bike_recipe)\nbike_workflow\n\n#&gt; ══ Workflow ════════════════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; Logistic Regression Model Specification (classification)\n#&gt; \n#&gt; Computational engine: glm\n\nbike_fit &lt;- bike_workflow %&gt;% \n  fit(data = train_data)\n\n#&gt; Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#&gt; ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#&gt; Preprocessor: Recipe\n#&gt; Model: logistic_reg()\n#&gt; \n#&gt; ── Preprocessor ────────────────────────────────────────────────────────────────\n#&gt; 2 Recipe Steps\n#&gt; \n#&gt; • step_dummy()\n#&gt; • step_zv()\n#&gt; \n#&gt; ── Model ───────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;                (Intercept)                          id  \n#&gt;                 -17.264552                    0.114620  \n#&gt;                     weight                       price  \n#&gt;                  -1.493362                    0.002018  \n#&gt;           shimano_dura_ace             shimano_ultegra  \n#&gt;                 -12.171033                  -19.770451  \n#&gt;                shimano_105              shimano_tiagra  \n#&gt;                 -19.759051                  -39.848572  \n#&gt;              shimano_deore                 shimano_slx  \n#&gt;                   1.685459                  -37.868832  \n#&gt;                shimano_grx                  Shimano_xt  \n#&gt;                  -1.577636                   -0.717922  \n#&gt;                   SRAM_red                  SRAM_force  \n#&gt;                 -26.603230                   -4.969519  \n#&gt;                 SRAM_rival                   SRAM_apex  \n#&gt;                 -16.492373                  -39.573006  \n#&gt;                   SRAM_xx1                    SRAM_x01  \n#&gt;                 -40.693453                   17.283804  \n#&gt;                    SRAM_gx                     SRAM_nx  \n#&gt;                   1.032508                  -35.857640  \n#&gt;                    SRAM_sx          Campagnolo_potenza  \n#&gt;                 -19.206294                   -0.783400  \n#&gt;    Campagnolo_super_record               shimano_nexus  \n#&gt;                 -29.027379                   -0.878009  \n#&gt;             shimano_alfine           category_1_Gravel  \n#&gt;                  -2.101500                   69.709167  \n#&gt;   category_1_Hybrid...City         category_1_Mountain  \n#&gt;                 -14.289330                   32.381273  \n#&gt;            category_1_Road         category_2_All.Road  \n#&gt;                  60.248116                  -16.341114  \n#&gt;            category_2_City    category_2_Cross.Country  \n#&gt;                  35.922139                   38.900469  \n#&gt;      category_2_Cyclocross        category_2_Dirt.Jump  \n#&gt;                  -0.458623                  -42.485784  \n#&gt;        category_2_Downhill           category_2_E.City  \n#&gt;                 -61.173010                   40.237037  \n#&gt;       category_2_E.Fitness         category_2_E.Gravel  \n#&gt;                 -13.093164                   44.758118  \n#&gt;      category_2_E.Mountain           category_2_E.Road  \n#&gt;                  44.023729                    8.866479  \n#&gt;      category_2_E.Trekking        category_2_Endurance  \n#&gt;                         NA                  -16.978241  \n#&gt;          category_2_Enduro        category_2_Fat.Bikes  \n#&gt;                 -20.787573                   49.627244  \n#&gt;            category_2_Race          category_2_Touring  \n#&gt;                   2.280715                          NA  \n#&gt; \n#&gt; ...\n#&gt; and 34 more lines.\n\n\n\nbike_fit %&gt;% \n  pull_workflow_fit() %&gt;% \n  tidy()\n\n#&gt; Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#&gt; ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_predict &lt;- predict(bike_fit, test_data, type=\"prob\") %&gt;% \n  bind_cols(test_data %&gt;% select(frame_material, category_2)) \nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_aluminium) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\n\nbike_predict %&gt;% \n  roc_curve(truth = frame_material, .pred_carbon) %&gt;% \n  autoplot()\n\n\n\n\n\n\nbike_predict\n\n\n\n  \n\n\n\n\nroc_al &lt;- bike_predict %&gt;% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\n\n\nroc_car &lt;- bike_predict %&gt;% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n\n\n4 Evaluation\n\nmodel_01_linear_lm_simple &lt;- linear_reg(mode = \"regression\") %&gt;%\n  set_engine(\"lm\") %&gt;%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#&gt; parsnip model object\n#&gt; \n#&gt; \n#&gt; Call:\n#&gt; stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#&gt; \n#&gt; Coefficients:\n#&gt;              (Intercept)        category_2All-Road            category_2City  \n#&gt;                 2266.848                  -837.139                 -1235.606  \n#&gt;  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#&gt;                   -1.111                  -713.333                  -977.848  \n#&gt;       category_2Downhill          category_2E-City       category_2E-Fitness  \n#&gt;                 3382.152                   723.861                   775.485  \n#&gt;       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#&gt;                 1345.000                  1016.291                   652.152  \n#&gt;     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#&gt;                 1140.485                  -632.643                   449.606  \n#&gt;      category_2Fat Bikes            category_2Race         category_2Touring  \n#&gt;                -1460.000                   765.000                 -1164.991  \n#&gt;          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#&gt;                 -498.669                   661.667                  1577.152\n\n\n\ntest_data &lt;- test_data %&gt;% filter(category_2 != \"E-Road\") %&gt;% filter(category_2 != \"Fat Bikes\")\nyards &lt;- model_01_linear_lm_simple %&gt;%\n  predict(new_data = test_data) %&gt;%\n  bind_cols(test_data %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\nyards\n\n\n\n  \n\n\n\n\ng1 &lt;- bike_features_tbl %&gt;% \n  mutate(category_2 = as.factor(category_2) %&gt;% \n           fct_reorder(price)) %&gt;% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs( title = \"Price for Each Model\", y = \"\", x = \"Category 2\")\ng1\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n\n\n\n\n\n\n\n\n\nnew_trail &lt;- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_trail\n\n\n\n  \n\n\n\n\npredict(model_01_linear_lm_simple, new_data = new_trail)\n\n\n\n  \n\n\nmodels_tbl &lt;- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\n\n\npredictions_new_trail &lt;- models_tbl %&gt;%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %&gt;%\n  unnest(predictions) %&gt;%\n  mutate(category_2 = \"Trail\") %&gt;%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail\n\n\n\n  \n\n\n\n\ng2 &lt;- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail)\ng2\n\n#&gt; Warning: Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.\n#&gt; Groups with fewer than two datapoints have been dropped.\n#&gt; ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/Automated_Machine_Learning_with_H2O.html",
    "href": "content/01_journal/Automated_Machine_Learning_with_H2O.html",
    "title": "\n1 Attrition by department",
    "section": "",
    "text": "library(tidymodels)\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(stringr)\nemployee_attrition_tbl &lt;- read.csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndept_job_role_tbl &lt;- employee_attrition_tbl %&gt;%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %&gt;%\n  \n  group_by(Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n1 Attrition by department\n\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %&gt;%\n  mutate(pct = n / sum(n))\n\n#&gt; `summarise()` has grouped output by 'Department'. You can override using the\n#&gt; `.groups` argument.\n\n\n\n\n  \n\n\n\n\n2 Attrition by job role\n\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n#&gt; `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#&gt; using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n3 Develop KPI\n\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n#&gt; `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#&gt; using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n4 Function to calculate attrition cost\n\ncalculate_attrition_cost &lt;- function(\n  \n  # Employee\n  n                    = 1,\n  salary               = 80000,\n  \n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  \n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n  \n) {\n  \n  # Direct Costs\n  direct_cost &lt;- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  \n  # Lost Productivity Costs\n  productivity_cost &lt;- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  \n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction &lt;- salary / workdays_per_year * workdays_position_open\n  \n  # Estimated Turnover Per Employee\n  cost_per_employee &lt;- direct_cost + productivity_cost - salary_benefit_reduction\n  \n  # Total Cost of Employee Turnover\n  total_cost &lt;- n * cost_per_employee\n  \n  return(total_cost)\n  \n}\ncalculate_attrition_cost()\n\n#&gt; [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#&gt; [1] 15696667\n\n\n\n5 Function creation\n\ndept_job_role_tbl %&gt;%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  \n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n#&gt; `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#&gt; using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n6 Function to convert counts to percentages.\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition)\n\n\n\n  \n\n\ncount_to_pct &lt;- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  return(ret)\n}\ndept_job_role_tbl %&gt;%\n  count(JobRole, Attrition) %&gt;%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) \n\n\n\n  \n\n\n\n\ndept_job_role_tbl %&gt;%\n  \n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  \n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  \n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  \n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n#&gt; `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#&gt; using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\nassess_attrition &lt;- function(data, attrition_col, attrition_value, baseline_pct) {\n  \n  attrition_col_expr &lt;- enquo(attrition_col)\n  \n  data %&gt;%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %&gt;%\n    arrange(desc(pct)) %&gt;%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct &gt; baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n  \n}\n\n\n7 Visualization\n\ndept_job_role_tbl %&gt;%\n  \n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  \n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %&gt;% as_factor()) %&gt;%\n  \n  # Check levels\n  # pull(name) %&gt;%\n  # levels()\n  \n  mutate(name      = fct_reorder(name, cost_of_attrition)) %&gt;%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %&gt;%\n  \n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %&gt;% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n\n\n# Employment Features\nemployee_attrition_tbl %&gt;% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %&gt;% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n\n\n# Survery Results\nemployee_attrition_tbl %&gt;% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n\n\n# Performance Data\nemployee_attrition_tbl %&gt;% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %&gt;% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n\n\n# Training & Education\nemployee_attrition_tbl %&gt;% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %&gt;% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %&gt;%\n  select(Attrition,  Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs()\n\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n8 Challenges\nDescriptive features: age, gender, marital status\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`.\n#&gt; ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\nEmployment features: department, job role, job level\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n#&gt; Warning in cor(x, y): the standard deviation is zero\n\n\n\n\n\n\n\n\nCompensation features: HourlyRate, MonthlyIncome,SalaryPercentHike StockOptionLevel\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nSurvey Results: Satisfaction level, Work Life Balance\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nPerformance Data: Job Involvement, Performance Rating\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWork-Life Features\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nTraining and Education\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nTime-Based Features: Years at company, years in current role\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n9 Answers\n\nCompensation Features: What can you deduce about the interaction between Monthly Income and Attrition?\n\n\nIt’s difficult to deduce anything based on the visualization\n\n\nCompensation Features: What can you deduce about the interaction between Percent Salary Hike and Attrition?\n\n\nIt’s difficult to deduce anything based on the visualization\n\n\nCompensation Features: What can you deduce about the interaction between Stock Option Level and Attrition?\n\n\nThose that are leaving the company have a higher stock option level\n\n\nSurvey Results: What can you deduce about the interaction between Environment Satisfaction and Attrition?\n\n\nA higher proportion of those leaving have a high environment satisfaction level\n\n\nSurvey Results: What can you deduce about the interaction between Work Life Balance and Attrition\n\n\nThose that are leaving have higher density of 2’s and 3’s\n\n\nPerformance Data: What Can you deduce about the interaction between Job Involvement and Attrition?\n\n\nThose that are staying have a lower density of 2’s and 3’s\n\n\nWork-Life Features: What can you deduce about the interaction between Over Time and Attrition?\n\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving\n\n\nTraining and Education: What can you deduce about the interaction between Training Times Last Year and Attrition\n\n\nPeople that leave tend to have more annual trainings\n\n\nTime-Based Features: What can you deduce about the interaction between Years At Company and Attrition\n\n\nPeople that leave tend to have less working years at the company\n\n\nTime-Based Features: What can you deduce about the interaction between Years Since Last Promotion and Attrition?\n\n\nIt’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html",
    "href": "content/01_journal/Chapter_1_Challenge.html",
    "title": "\n1 Challenge Summary",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "\n1 Challenge Summary",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(symbol, date, adjusted) %&gt;%\n  filter(year(date) &gt;= 2018) %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(lag_adjusted = lag(adjusted),\n         pct_return = (adjusted - lag_adjusted) / lag_adjusted) %&gt;%\n  drop_na(lag_adjusted) %&gt;%\n  select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "\n1 Challenge Summary",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  spread(date, pct_return, fill = 0)\n\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "\n1 Challenge Summary",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  kmeans(centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\ntot_withinss &lt;- glance(kmeans_obj)$tot.withinss"
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "\n1 Challenge Summary",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nkmeans_mapper &lt;- function(center) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n  mutate(k_means = map(centers, kmeans_mapper),\n         glance = map(k_means, glance))\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nscree_plot &lt;- k_means_mapped_tbl %&gt;%\n  unnest(glance) %&gt;%\n  ggplot(aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_tq()\n\nscree_plot\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "\n1 Challenge Summary",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\numap_results &lt;- umap(stock_date_matrix_tbl[, -1])\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- as_tibble(umap_results$layout) %&gt;%\n  bind_cols(symbol = stock_date_matrix_tbl$symbol)\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\numap_results_tbl\n\n\n\n  \n\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_plot &lt;- umap_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n  \numap_plot\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "\n1 Challenge Summary",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl$k_means[[10]]\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n  augment(stock_date_matrix_tbl) %&gt;%\n  select(symbol, .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n\numap_kmeans_results_tbl\n\n\n\n  \n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\ncombined_plot &lt;- umap_kmeans_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2, color = factor(.cluster))) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %&gt;% rep(3)) +\n  theme_tq() +\n  labs(title = \"Combined K-Means and UMAP Results\")\n\ncombined_plot\n\n#&gt; Warning: No shared levels found between `names(values)` of the manual scale and the\n#&gt; data's colour values.\n#&gt; No shared levels found between `names(values)` of the manual scale and the\n#&gt; data's colour values.\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  }
]